(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{837:function(t,s,e){"use strict";e.r(s);var a=e(14),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"fiber算法"}},[t._v("Fiber算法")]),t._v(" "),e("p",[e("code",[t._v("React")]),t._v("在"),e("code",[t._v("16")]),t._v("之后渲染的算法已经由原来的"),e("code",[t._v("reconciler(Stack reconciler)")]),t._v("算法改为了"),e("code",[t._v("Fiber")]),t._v("算法。"),e("code",[t._v("Fiber")]),t._v("（可译为丝）比线程还细的控制粒度，旨在对渲染过程做更精细的调整。")]),t._v(" "),e("h3",{attrs:{id:"替换原因"}},[t._v("替换原因")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("之前的"),e("code",[t._v("reconciler（被称为Stack reconciler）")]),t._v("采用"),e("code",[t._v("自顶向下")]),t._v("的递归"),e("code",[t._v("mount/update")]),t._v("，无法中断（持续占用主线程），这样主线程上的布局、动画等周期性任务以及交互响应就无法立即得到处理，影响体验。")])]),t._v(" "),e("li",[e("p",[t._v("之前的渲染过程中没有优先级可言")])])]),t._v(" "),e("p",[t._v("基于浏览器对 "),e("code",[t._v("requestIdleCallback")]),t._v(" 和 "),e("code",[t._v("requestAnimationFrame")]),t._v(" 这两个 "),e("code",[t._v("API")]),t._v(" 的支持,"),e("code",[t._v("React")]),t._v(" 团队实现新的调度策略 -- "),e("code",[t._v("Fiber reconcile")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"requestidelcallback"}},[t._v("requestIdelCallBack")]),t._v(" "),e("p",[t._v("客户端线程执行任务时会以帧的形式划分，大部分设备控制在30-60帧是不会影响用户体验的。在两个帧的执行期间，主线程通常会有一小段的空闲时间。"),e("code",[t._v("requestIdelCallBack")]),t._v("可以在这个空闲时间调用"),e("code",[t._v("IdelCallBack")]),t._v("执行一些任务。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("低优先级的任务将由"),e("code",[t._v("requestIdelCallBack")]),t._v("来处理")])]),t._v(" "),e("li",[e("p",[t._v("高优先级的任务，比如动画相关的由"),e("code",[t._v("requestAnimationFrame")]),t._v("来处理")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("requestIdelCallBack")]),t._v("可以在多个空闲期调用空闲期回调，执行任务")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("requestIdelCallBack")]),t._v("方法提供"),e("code",[t._v("deadline")]),t._v("即任务执行限制时间以切分任务，避免长时间执行，阻塞"),e("code",[t._v("UI")]),t._v("渲染而导致掉帧。")])])]),t._v(" "),e("h3",{attrs:{id:"react-fiber的方式："}},[t._v("React Fiber的方式：")]),t._v(" "),e("p",[t._v("把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。")]),t._v(" "),e("p",[e("code",[t._v("React Fiber")]),t._v("把更新过程碎片化，每执行完一段更新过程，就把控制权交还给"),e("code",[t._v("React")]),t._v("负责任务协调的模块，看看有没有其他紧急任务要做，如果没有就继续去更新，如果有紧急任务，那就去做紧急任务。")]),t._v(" "),e("h3",{attrs:{id:"fiber调度的两个阶段："}},[t._v("Fiber调度的两个阶段：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("render/reconciliation 阶段")]),t._v("。此阶段中，依序遍历组件，通过 "),e("code",[t._v("diff")]),t._v(" 算法，判断组件是否需要更新，给需要更新的组件加上 "),e("code",[t._v("tag")]),t._v("。遍历完之后，将所有带有 "),e("code",[t._v("tag")]),t._v(" 的组件加到一个数组中。这个阶段的任务可以被打断。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("render/reconciliation 阶段")]),t._v(" 里面的所有生命周期函数都可能被执行多次，所以尽量保证状态不变")]),t._v(" "),e("ul",[e("li",[t._v("getDerivedStateFromProps")]),t._v(" "),e("li",[t._v("shouldComponentUpdate")]),t._v(" "),e("li",[t._v("componentWillUpdate")])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[t._v("Commit 阶段")]),t._v("。根据在 "),e("code",[t._v("Reconcile")]),t._v(" 阶段生成的数组，遍历更新 "),e("code",[t._v("DOM")]),t._v("，这个阶段需要一次性执行完。如果是在其他的渲染环境 -- "),e("code",[t._v("Native")]),t._v("，硬件，就会更新对应的元素。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("Commit 阶段")]),t._v("不可以被打断")]),t._v(" "),e("ul",[e("li",[t._v("componentDidMount")]),t._v(" "),e("li",[t._v("componentDidUpdate")]),t._v(" "),e("li",[t._v("compoenntWillunmount")])])]),t._v(" "),e("h3",{attrs:{id:"fiber任务的优先级"}},[t._v("Fiber任务的优先级")]),t._v(" "),e("p",[e("code",[t._v("Fiber")]),t._v(" 对任务进行优先级划分。不是每来一个新任务，就要放弃现执行任务，转而执行新任务。只有当比现任务优先级高的任务来了，才需要放弃现任务的执行。")]),t._v(" "),e("p",[t._v("比如说，屏幕外元素的渲染和更新任务的优先级应该小于响应用户输入任务。若现在进行屏幕外组件状态更新，用户又在输入，浏览器就应该先执行响应用户输入任务。")]),t._v(" "),e("h3",{attrs:{id:"fiber部分源码"}},[t._v("Fiber部分源码")]),t._v(" "),e("p",[t._v("与"),e("code",[t._v("Fiber")]),t._v("有关的所有代码位于"),e("code",[t._v("packages/react-reconciler")]),t._v("中，一个"),e("code",[t._v("Fiber")]),t._v("节点的详细定义如下：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v(" FiberNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" WorkTag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  pendingProps"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mixed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TypeOfMode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Instance")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fiber")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重点")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contextDependencies "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Effects")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 细节略 **/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("这个"),e("code",[t._v("key")]),t._v("用来存储在上次渲染过程中最终获得的节点的"),e("code",[t._v("state")]),t._v("，每次"),e("code",[t._v("render")]),t._v("之前，"),e("code",[t._v("React")]),t._v("会计算出当前组件最新的"),e("code",[t._v("state")]),t._v("然后赋值给组件，再执行"),e("code",[t._v("render")]),t._v("。————"),e("code",[t._v("类组件")]),t._v("和"),e("code",[t._v("使用useState的函数组件")]),t._v("均适用。")])])}),[],!1,null,null,null);s.default=n.exports}}]);