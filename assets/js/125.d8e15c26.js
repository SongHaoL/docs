(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{783:function(v,_,l){"use strict";l.r(_);var i=l(14),t=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"谈谈你对前端工程化的理解？"}},[v._v("谈谈你对前端工程化的理解？")]),v._v(" "),l("blockquote",[l("p",[v._v("前端工程化是指使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化。")])]),v._v(" "),l("p",[v._v("主要包含以下几个方面:")]),v._v(" "),l("ul",[l("li",[v._v("模块化")]),v._v(" "),l("li",[v._v("组件化")]),v._v(" "),l("li",[v._v("规范化")]),v._v(" "),l("li",[v._v("自动化")])]),v._v(" "),l("h2",{attrs:{id:"模块化"}},[v._v("模块化")]),v._v(" "),l("p",[v._v("简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。")]),v._v(" "),l("ul",[l("li",[v._v("JS的模块化:"),l("code",[v._v("import")]),v._v("引入规范化，"),l("code",[v._v("Webpack")]),v._v(" + "),l("code",[v._v("Babel")]),v._v("将所有模块打包成一个文件同步加载，也可以打包成多个"),l("code",[v._v("chunk")]),v._v("异步加载。")]),v._v(" "),l("li",[v._v("CSS模块化:"),l("code",[v._v("SASS")]),v._v("、"),l("code",[v._v("LESS")]),v._v("等预处理器实现了"),l("code",[v._v("CSS")]),v._v("的文件拆分,"),l("code",[v._v("CSS Modules")]),v._v("来管理"),l("code",[v._v("css")]),v._v("。原理:通过在每个 class 名后带一个独一无二的 "),l("code",[v._v("hash")]),v._v(" 值，这样就不有存在全局命名冲突的问题了。")]),v._v(" "),l("li",[v._v("资源的模块化:统一处理CSS和图片等资源，用"),l("code",[v._v("loader")]),v._v("对各种资源做各种事情，webpack(src, config)使项目结构更加清晰。")])]),v._v(" "),l("h2",{attrs:{id:"组件化"}},[v._v("组件化")]),v._v(" "),l("p",[v._v("组件化≠模块化。")]),v._v(" "),l("p",[v._v("模块化只是在文件层面上，对代码或资源的拆分；而组件化是在设计层面上，对UI（用户界面）的拆分。")]),v._v(" "),l("p",[v._v("页面上所有的东西都是组件。页面是个大型组件，可以拆成若干个中型组件，然后中型组件还可以再拆，拆成若干个小型组件，小型组件也可以再拆，直到拆成DOM元素为止。DOM元素可以看成是浏览器自身的组件，作为组件的基本单元。")]),v._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),l("p",[v._v("传统前端框架/类库的思想是先组织"),l("code",[v._v("DOM")]),v._v("，然后把某些可复用的逻辑封装成组件来操作"),l("code",[v._v("DOM")]),v._v("，是"),l("code",[v._v("DOM")]),v._v("优先；")]),v._v(" "),l("p",[v._v("而组件化框架/类库的思想是先来构思组件，然后用"),l("code",[v._v("DOM")]),v._v("这种基本单元结合相应逻辑来实现组件，是组件优先。这是两者本质的区别。")])]),v._v(" "),l("h2",{attrs:{id:"规范化"}},[v._v("规范化")]),v._v(" "),l("p",[v._v("规范化其实是工程化中很重要的一个部分，项目初期规范制定的好坏会直接影响到后期的开发质量。")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("目录结构的制定")]),v._v(" "),l("p",[v._v("目录结构的合理设定，能为项目带来很多优点：")]),v._v(" "),l("ol",[l("li",[v._v("有助于提高项目的逻辑结构合理性；")]),v._v(" "),l("li",[v._v("对应扩展和合作；")]),v._v(" "),l("li",[v._v("方便资源的统一定位管理。")])])]),v._v(" "),l("li",[l("p",[v._v("编码规范")]),v._v(" "),l("ol",[l("li",[v._v("HTML规范")]),v._v(" "),l("li",[v._v("CSS规范")]),v._v(" "),l("li",[v._v("JS规范")]),v._v(" "),l("li",[v._v("图片规范")]),v._v(" "),l("li",[v._v("命名规范")])])]),v._v(" "),l("li",[l("p",[v._v("前后端接口规范")])]),v._v(" "),l("li",[l("p",[v._v("文档规范")])]),v._v(" "),l("li",[l("p",[l("code",[v._v("git")]),v._v("分支管理")])]),v._v(" "),l("li",[l("p",[l("code",[v._v("commit")]),v._v("描述规范")])]),v._v(" "),l("li",[l("p",[v._v("视觉图标规范")])])]),v._v(" "),l("h2",{attrs:{id:"自动化"}},[v._v("自动化")]),v._v(" "),l("p",[v._v("前端工程化的很多脏活累活都应该交给自动化工具来完成。需要秉持的一个理念是:"),l("code",[v._v("任何简单机械的重复劳动都应该让机器去完成")]),v._v("。")]),v._v(" "),l("ul",[l("li",[v._v("图标合并")]),v._v(" "),l("li",[v._v("持续继承")]),v._v(" "),l("li",[v._v("自动化构建")]),v._v(" "),l("li",[v._v("自动化部署")]),v._v(" "),l("li",[v._v("自动化测试")])])])}),[],!1,null,null,null);_.default=t.exports}}]);