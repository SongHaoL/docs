(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{668:function(e,v,t){"use strict";t.r(v);var _=t(15),o=Object(_.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器同源策略"}},[e._v("浏览器同源策略")]),e._v(" "),t("ul",[t("li",[e._v("2021.04.29")])]),e._v(" "),t("p",[e._v("当浏览器访问 "),t("code",[e._v("URL")]),e._v(" 地址的协议（schema）/ 端口（port）/ 域名（host），三者中有任何一个与当前的 URL 片段信息不匹配的时候，就产生了跨域问题。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("当前地址")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("请求地址")]),e._v(" "),t("th",{staticStyle:{"text-align":"center"}},[e._v("是否跨域")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("http://www.juejin.com:80")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("https://www.juejin.com:80")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("是(协议不同)")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("http://www.juejin.com:80")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("http://www.juejin.cn:80")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("是(域名不同)")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("http://www.juejin.com:80")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("http://www.juejin.com:90")]),e._v(" "),t("td",{staticStyle:{"text-align":"center"}},[e._v("是(端口不同)")])])])]),e._v(" "),t("h2",{attrs:{id:"跨域的说明"}},[e._v("跨域的说明")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("跨域，是浏览器提供的一种保护手段，服务端是不存在跨域这一说的。这也就是为什么现在前后端分离的开发模式下，前端比较依赖 "),t("code",[e._v("webpack-dev-server")]),e._v(" 启动代理服务来中转和代理后台接口的原因，因为两个服务器之间相互通信是没有跨域障碍的。")])]),e._v(" "),t("li",[t("p",[e._v("跨域，是对于 "),t("code",[e._v("XMLHttpRequest")]),e._v(" 来说的，"),t("strong",[e._v("浏览器获取不同源服务器下的静态资源，是没有跨域限制的")]),e._v("，这也是 "),t("code",[e._v("JSONP")]),e._v(" 跨域请求得以实现的本质。")])]),e._v(" "),t("li",[t("p",[e._v("不同于 "),t("code",[e._v("XMLHttpRequest")]),e._v(" 的是，通过 "),t("code",[e._v("src")]),e._v(" 属性加载的脚本资源，浏览器限制了 "),t("code",[e._v("Javascript")]),e._v(" 的权限，使其不能读写、返回内容。")])]),e._v(" "),t("li",[t("p",[e._v("对于浏览器来说，除了 "),t("code",[e._v("DOM")]),e._v(" 、"),t("code",[e._v("Cookie")]),e._v("、"),t("code",[e._v("XMLHttpRequest")]),e._v(" 会收到同源策略限制以外，一些常见的插件，比如 "),t("code",[e._v("Flash")]),e._v("、"),t("code",[e._v("Java Applet")]),e._v(" 、"),t("code",[e._v("Silverlight")]),e._v("、"),t("code",[e._v("Google Gears")]),e._v(" 等也都有自己的控制策略。")])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("当浏览器向不同域的服务器发送请求时，请求是真能发出去，对方服务端也是真能接收到请求，并且真能给你的浏览器响应，浏览器也真能接收到有效数据。")]),e._v(" "),t("p",[e._v("但是，如果在"),t("code",[e._v("跨域")]),e._v("的情况下、服务端返回数据的响应头里的 "),t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 字段，没有把当前域名列进白名单，那么浏览器会把服务端返回的数据给藏起来，不告诉你，然后给你抛个 "),t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 的错误。")])]),e._v(" "),t("h3",{attrs:{id:"为什么资源文件不受同源策略限制呢？"}},[t("strong",[e._v("为什么资源文件不受同源策略限制呢？")])]),e._v(" "),t("p",[e._v("假如说资源文件也被限制跨域，那么现在大量使用的 "),t("code",[e._v("CDN 缓存策略")]),e._v("基本就没办法用了。而且现在很多网站的资源文件，都会放到云服务器的 "),t("code",[e._v("OSS")]),e._v(" 上，"),t("code",[e._v("OSS")]),e._v(" 资源对应的 "),t("code",[e._v("url")]),e._v(" 地址肯定是不同域的，那这些资源也不能使用了。")]),e._v(" "),t("h2",{attrs:{id:"access-control-allow-origin"}},[e._v("Access-Control-Allow-Origin")]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 标识了服务器允许的跨域白名单，它有以下几种设置方法：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("直接设置 "),t("code",[e._v("*")]),e._v(" 通配符，简单粗暴，但是这么做等于把服务器的所有接口资源对外完全暴露，是不安全的。")])]),e._v(" "),t("li",[t("p",[e._v("设置指定域，比如 "),t("code",[e._v("Access-Control-Allow-Origin: https://www.baidu.com")]),e._v(" ，这样只会允许指定域的请求进行跨域访问。")])]),e._v(" "),t("li",[t("p",[e._v("由后端动态设置。"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 限制只能写一个白名单，但是当我们有多个域都需要跨域请求怎么呢？这个时候，这时可以由服务端自己维护一套白名单列表，在请求进来的时候对请求的源 "),t("code",[e._v("host")]),e._v(" 进行白名单比对，如果在白名单中，就将这个 "),t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 动态设置上去，然后返回响应。")])])]),e._v(" "),t("h2",{attrs:{id:"cors-的预请求"}},[e._v("CORS 的预请求")]),e._v(" "),t("p",[e._v("如果我们像上面一样，只设置了 "),t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 白名单，是否就可以完全畅通无阻地进行跨域了呢？并不是。\n就算对端开启了域名白名单认证，然鹅有一些操作仍然是需要进一步认证的，这种进一步的认证操作，就是 "),t("code",[e._v("CORS")]),e._v(" 预请求。")]),e._v(" "),t("h2",{attrs:{id:"预请求触发过程"}},[e._v("预请求触发过程")]),e._v(" "),t("p",[e._v("浏览器预请求的触发条件，是判断本次请求是否属于一个简单请求。")]),e._v(" "),t("p",[e._v("如果本次请求属于一个复杂请求，那么在发送正式的跨域请求之前，浏览器会先准备一个名为 "),t("code",[e._v("OPTIONS")]),e._v(" 的 "),t("code",[e._v("HTTP Method")]),e._v(" ，作为预请求发送。")]),e._v(" "),t("p",[e._v("在服务器通过预请求后，下面浏览器才会发生正式的数据请求。整个请求过程其实是发生了两次请求："),t("code",[e._v("一个预检请求")]),e._v("，以及后续的实际数据请求。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("当我们使用原生的 fetch 去请求时,当发生跨域时，fetch 会先发送一个"),t("code",[e._v("OPTIONS")]),e._v("请求，来确认服务器是否允许接受请求。")]),e._v(" "),t("p",[e._v("服务器同意后，才会发送真正的请求。")])]),e._v(" "),t("h2",{attrs:{id:"简单请求"}},[e._v("简单请求")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("请求方式只能是 "),t("code",[e._v("GET")]),e._v("、"),t("code",[e._v("POST")]),e._v("、"),t("code",[e._v("HEAD")])])]),e._v(" "),t("li",[t("p",[e._v("请求头字段只允许：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Accept")])]),e._v(" "),t("li",[t("code",[e._v("Accept-Language")])]),e._v(" "),t("li",[t("code",[e._v("Content-Language")])]),e._v(" "),t("li",[t("code",[e._v("Content-Type")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("Content-Type")]),e._v(" 的值仅限于：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("text/plain")])]),e._v(" "),t("li",[t("code",[e._v("multipart/form-data")])]),e._v(" "),t("li",[t("code",[e._v("application/x-www-form-urlencoded")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("XMLHttpRequestUpload")]),e._v(" 对象均没有注册任何事件监听器（了解就好）。")])]),e._v(" "),t("li",[t("p",[e._v("请求中没有使用 "),t("code",[e._v("ReadableStream")]),e._v(" 对象（了解就好）。")])])]),e._v(" "),t("h2",{attrs:{id:"复杂请求"}},[e._v("复杂请求")]),e._v(" "),t("p",[e._v("除了简单请求里定义的，都是复杂请求，统统需要预请求。")]),e._v(" "),t("h2",{attrs:{id:"预请求的验证"}},[e._v("预请求的验证")]),e._v(" "),t("p",[e._v("那么怎样使预检请求成功认证呢？还是需要服务端继续帮忙设置请求头的白名单：")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("Access-Control-Allow-Headers")]),e._v("，设置允许的额外请求头字段。")]),e._v(" "),t("li",[t("code",[e._v("Access-Control-Allow-Methods")]),e._v("，设置允许的额外请求方法。")]),e._v(" "),t("li",[t("code",[e._v("Access-Control-Max-Age")]),e._v(" （单位/秒），指定了预请求的结果能够被缓存多久，在这个时间范围内，再次发送跨域请求不会被预检。")])]),e._v(" "),t("h2",{attrs:{id:"http-响应首部字段说明"}},[e._v("HTTP 响应首部字段说明")]),e._v(" "),t("p",[e._v("这里列出了部分的响应字段:")]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-allow-origin-2"}},[t("code",[e._v("Access-Control-Allow-Origin")]),e._v(":")])])]),e._v(" "),t("p",[e._v("响应首部中可以携带一个 "),t("code",[e._v("Access-Control-Allow-Origin")]),e._v(" 字段，其语法如下:")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Allow-Origin: <origin> | \\*")])])]),e._v(" "),t("p",[e._v("其中，"),t("code",[e._v("origin")]),e._v(" 参数的值指定了允许访问该资源的外域 "),t("code",[e._v("URI")]),e._v("。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。")]),e._v(" "),t("p",[e._v("例如，下面的字段值将允许来自 "),t("code",[e._v("http://mozilla.com")]),e._v(" 的请求：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Allow-Origin: http://mozilla.com")])])]),e._v(" "),t("p",[e._v("如果服务端指定了具体的域名而非"),t("code",[e._v("*")]),e._v("，那么响应首部中的 "),t("code",[e._v("Vary")]),e._v(" 字段的值必须包含 "),t("code",[e._v("Origin")]),e._v("。这将告诉客户端：服务器对不同的源站返回不同的内容。")]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-expose-headers"}},[t("code",[e._v("Access-Control-Expose-Headers")])])])]),e._v(" "),t("p",[e._v("在跨源访问时，"),t("code",[e._v("XMLHttpRequest")]),e._v("对象的"),t("code",[e._v("getResponseHeader()")]),e._v("方法只能拿到一些最基本的响应头，"),t("code",[e._v("Cache-Control")]),e._v("、"),t("code",[e._v("Content-Language")]),e._v("、"),t("code",[e._v("Content-Type")]),e._v("、"),t("code",[e._v("Expires")]),e._v("、"),t("code",[e._v("Last-Modified")]),e._v("、"),t("code",[e._v("Pragma")]),e._v("，如果要访问其他头，则需要服务器设置本响应头。")]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Expose-Headers")]),e._v(" 头让服务器把允许浏览器访问的头放入白名单，例如：")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header")])])]),e._v(" "),t("p",[e._v("这样浏览器就能够通过"),t("code",[e._v("getResponseHeader")]),e._v("访问"),t("code",[e._v("X-My-Custom-Header")]),e._v("和 "),t("code",[e._v("X-Another-Custom-Header")]),e._v(" 响应头了。")]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-max-age"}},[t("code",[e._v("Access-Control-Max-Age")])])])]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Max-Age")]),e._v(" 头指定了 "),t("code",[e._v("preflight")]),e._v(" 请求的结果能够被缓存多久。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Max-Age: <delta-seconds>")])])]),e._v(" "),t("p",[t("code",[e._v("delta-seconds")]),e._v(" 参数表示 "),t("code",[e._v("preflight")]),e._v(" 请求的结果在多少秒内有效。")]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-allow-credentials"}},[t("code",[e._v("Access-Control-Allow-Credentials")])])])]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Allow-Credentials")]),e._v(" 头指定了当浏览器的"),t("code",[e._v("credentials")]),e._v("设置为"),t("code",[e._v("true")]),e._v("时是否允许浏览器读取"),t("code",[e._v("response")]),e._v("的内容。")]),e._v(" "),t("p",[e._v("当用在对 "),t("code",[e._v("preflight")]),e._v(" 预检测请求的响应中时，它指定了实际的请求是否可以使用 "),t("code",[e._v("credentials")]),e._v("。")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("请注意：简单 "),t("code",[e._v("GET")]),e._v(" 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Allow-Credentials: true")])])]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-allow-methods"}},[t("code",[e._v("Access-Control-Allow-Methods")])])])]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Allow-Methods")]),e._v(" 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 "),t("code",[e._v("HTTP")]),e._v(" 方法。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Allow-Methods: <method>[, <method>]*")])])]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-allow-headers"}},[t("code",[e._v("Access-Control-Allow-Headers")])])])]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Allow-Headers")]),e._v(" 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Allow-Headers: <field-name>[, <field-name>]*")])])]),e._v(" "),t("h2",{attrs:{id:"http-请求首部字段"}},[e._v("HTTP 请求首部字段")]),e._v(" "),t("p",[e._v("这里罗列了部分可用于发起跨源请求的首部字段。请注意，这些首部字段无须手动设置。 当开发者使用 "),t("code",[e._v("XMLHttpRequest")]),e._v(" 对象发起跨源请求时，它们已经被设置就绪。")]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"origin"}},[t("code",[e._v("Origin")])])])]),e._v(" "),t("p",[t("code",[e._v("Origin")]),e._v(" 首部字段表明预检请求或实际请求的源站。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Origin: <origin>")])])]),e._v(" "),t("p",[t("code",[e._v("origin")]),e._v(" 参数的值为源站 "),t("code",[e._v("URI")]),e._v("。它不包含任何路径信息，只是服务器名称。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("有时候将该字段的值设置为空字符串是有用的，例如，当源站是一个 "),t("code",[e._v("data URL")]),e._v(" 时。")])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("注意，在所有访问"),t("code",[e._v("控制请求（Access control request）")]),e._v("中，"),t("code",[e._v("Origin")]),e._v(" 首部字段总是被发送。")])]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-request-method"}},[t("code",[e._v("Access-Control-Request-Method")])])])]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Request-Method")]),e._v(" 首部字段用于预检请求。其作用是，将实际请求所使用的 "),t("code",[e._v("HTTP")]),e._v(" 方法告诉服务器。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Request-Method: <method>")])])]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"access-control-request-headers"}},[t("code",[e._v("Access-Control-Request-Headers")])])])]),e._v(" "),t("p",[t("code",[e._v("Access-Control-Request-Headers")]),e._v(" 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("Access-Control-Request-Headers: <field-name>[, <field-name>]*")])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("更加完整的跨域信息可以"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[e._v("点击这里查看更多"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=o.exports}}]);