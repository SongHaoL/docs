(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{749:function(t,s,v){"use strict";v.r(s);var _=v(14),a=Object(_.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据类型"}},[t._v("数据类型")]),t._v(" "),v("p",[t._v("javascript有如下几种数据类型：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("基本数据类型")]),t._v(" "),v("ol",[v("li",[v("code",[t._v("undefined")])]),t._v(" "),v("li",[v("code",[t._v("null")])]),t._v(" "),v("li",[v("code",[t._v("number")])]),t._v(" "),v("li",[v("code",[t._v("string")])]),t._v(" "),v("li",[v("code",[t._v("boolean")])]),t._v(" "),v("li",[v("code",[t._v("symbol")])]),t._v(" "),v("li",[v("code",[t._v("bigInt")])])])]),t._v(" "),v("li",[v("p",[t._v("复杂数据类型")]),t._v(" "),v("ol",[v("li",[v("code",[t._v("object")])])])])]),t._v(" "),v("p",[t._v("在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。")]),t._v(" "),v("p",[t._v("基本数据类型："),v("code",[t._v("Undefined")]),t._v("、"),v("code",[t._v("Null")]),t._v("、"),v("code",[t._v("Boolean")]),t._v("、"),v("code",[t._v("Number")]),t._v(" 、"),v("code",[t._v("String")]),t._v("、"),v("code",[t._v("Symbol")]),t._v("、"),v("code",[t._v("BigInt")]),t._v(" 是按值访问的，因为可以操作保存在变量中的实际的值。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[v("code",[t._v("引用类型")]),t._v("的值是保存在"),v("code",[t._v("内存")]),t._v("中的对象。与其他语言不同，"),v("code",[t._v("JavaScript")]),t._v("不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。")]),t._v(" "),v("p",[t._v("当复制保存着对象的某个变量时，操作的是对象的引用。")]),t._v(" "),v("p",[t._v("但在为对象添加属性时，操作的是实际的对象。")])]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),v("p",[t._v("只能给"),v("code",[t._v("引用类型值")]),t._v("动态地添加属性，以便将来使用。")])]),t._v(" "),v("h2",{attrs:{id:"复制变量值"}},[t._v("复制变量值")]),t._v(" "),v("p",[t._v("如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("var num1 = 5; \nvar num2 = num1;\n")])])]),v("p",[t._v("在此，"),v("code",[t._v("num1")]),t._v("中保存的值是 5。当使用"),v("code",[t._v("num1")]),t._v("的值来初始化"),v("code",[t._v("num2")]),t._v(" 时，"),v("code",[t._v("num2")]),t._v("中也保存了值 5。")]),t._v(" "),v("p",[t._v("但"),v("code",[t._v("num2")]),t._v("中的 5 与 "),v("code",[t._v("num1")]),t._v(" 中的 5 是完全独立的，该值只是 "),v("code",[t._v("num1")]),t._v(" 中 5 的一个副本。")]),t._v(" "),v("p",[v("strong",[t._v("此后，这两个变量可以参与任何操作而不会相互影响。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200205212032400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hqbDI3MTMxNA==,size_10,color_FFFFFF,t_10",alt:"基础类型变量赋值"}})]),t._v(" "),v("h2",{attrs:{id:"复制引用类型"}},[t._v("复制引用类型")]),t._v(" "),v("p",[t._v("当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。")]),t._v(" "),v("p",[t._v("不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。")]),t._v(" "),v("p",[t._v("因此，改变其中一个变量，就会影响另一个变量，如下面的例子所示：")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nobj1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"Nicholas"')]),t._v("\n")])])]),v("p",[t._v("首先，变量"),v("code",[t._v("obj1")]),t._v("保存了一个对象的新实例。然后，这个值被复制到了 "),v("code",[t._v("obj2")]),t._v(" 中；")]),t._v(" "),v("p",[t._v("换句话说，"),v("code",[t._v("obj1")]),t._v("和 "),v("code",[t._v("obj2")]),t._v(" 都指向同一个对象。这样，当为 "),v("code",[t._v("obj1")]),t._v(" 添加 "),v("code",[t._v("name")]),t._v(" 属性后，可以通过 "),v("code",[t._v("obj2")]),t._v(" 来访问这个属性，\n因为这两个变量引用的都是同一个对象。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200205220827456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hqbDI3MTMxNA==,size_16,color_FFFFFF,t_70",alt:"引用类型变量赋值"}})]),t._v(" "),v("h2",{attrs:{id:"变量类型检测"}},[t._v("变量类型检测")]),t._v(" "),v("ul",[v("li",[t._v("如果想检验变量是否是基础类型的话，推荐的方式是"),v("code",[t._v("typeof")]),t._v("操作符。")]),t._v(" "),v("li",[t._v("如果我们想要知道一个对象是什么类型的对象，推荐使用"),v("code",[t._v("instanceof")]),t._v("来判断。")]),t._v(" "),v("li",[t._v("通用的方式，我们可以使用"),v("code",[t._v("Object.prototype.toString.call()")]),t._v("来检测变量具体是什么类型。")])]),t._v(" "),v("h2",{attrs:{id:"引用类型与基本类型生命周期"}},[t._v("引用类型与基本类型生命周期")]),t._v(" "),v("ul",[v("li",[t._v("使用"),v("code",[t._v("new")]),t._v("操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。")]),t._v(" "),v("li",[t._v("自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。")])]),t._v(" "),v("p",[v("font",{attrs:{color:"red"}},[t._v("这意味着我们不能在运行时为基本类型值添加属性和方法。")]),t._v("来看下面的例子：")],1),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some text"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ns1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n")])])]),v("p",[t._v("在此，第二行代码试图为字符串 "),v("code",[t._v("s1")]),t._v(" 添加一个 "),v("code",[t._v("color")]),t._v(" 属性。但是，当第三行代码再次访问 "),v("code",[t._v("s1")]),t._v(" 时，其 "),v("code",[t._v("color")]),t._v(" 属性不见了。")]),t._v(" "),v("p",[t._v("问题的原因就是第二行创建的 "),v("code",[t._v("String")]),t._v(" 对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的 "),v("code",[t._v("String")]),t._v(" 对象，而该对象没有"),v("code",[t._v("color")]),t._v(" 属性。")])])}),[],!1,null,null,null);s.default=a.exports}}]);