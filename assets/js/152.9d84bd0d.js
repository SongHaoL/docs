(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{770:function(_,v,o){"use strict";o.r(v);var e=o(15),c=Object(e.a)({},(function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("h1",{attrs:{id:"进程、线程与协程"}},[_._v("进程、线程与协程")]),_._v(" "),o("ul",[o("li",[_._v("2020.06.16")])]),_._v(" "),o("h2",{attrs:{id:"进程"}},[_._v("进程")]),_._v(" "),o("blockquote",[o("p",[_._v("直观点说，保存在硬盘上的程序运行以后，会在内存空间里形成一个独立的内存体，这个内存体有自己独立的地址空间，有自己的堆，既不共享堆，也不共享栈，上级挂靠单位是"),o("code",[_._v("操作系统")]),_._v("。"),o("code",[_._v("操作系统")]),_._v("会以"),o("code",[_._v("进程")]),_._v("为单位，分配系统资源（CPU时间片、内存等资源），"),o("code",[_._v("进程")]),_._v("是"),o("code",[_._v("资源分配的最小单位")]),_._v("。")])]),_._v(" "),o("p",[o("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200616202502898.jpg",alt:"进程"}})]),_._v(" "),o("p",[_._v("因此进程的创建和销毁都是相对于操作系统的资源，所以是一种比较昂贵的操作。")]),_._v(" "),o("p",[_._v("进程主要有三种状态:")]),_._v(" "),o("ol",[o("li",[o("p",[o("code",[_._v("等待态")]),_._v(": 等待某个事件的完成。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("就绪态")]),_._v(": 等待系统分配处理器以便运行。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("运行态")]),_._v(": 占有处理器正在运行。")])])]),_._v(" "),o("p",[_._v("进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码，但是多进程的实现则是通过CPU飞快的切换不同进程，因此看起来就像是多个进程在同时进行。")]),_._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[_._v("TIP")]),_._v(" "),o("p",[_._v("由于进程间是隔离的，各自拥有自己的内存和资源，因此相对于线程比较安全，所以不同进程之间的通信只能通过IPC(Inter-Process Communication)进行通信共享。")])]),_._v(" "),o("p",[o("strong",[_._v("IPC的通信主要涉及到如下，这里不进行详细的解释:")])]),_._v(" "),o("ul",[o("li",[o("code",[_._v("管道(Pipe)")])]),_._v(" "),o("li",[o("code",[_._v("命名管道(FIFO)")])]),_._v(" "),o("li",[o("code",[_._v("消息队列(Message Queue)")])]),_._v(" "),o("li",[o("code",[_._v("信号量(Semaphore)")])]),_._v(" "),o("li",[o("code",[_._v("共享内存（Shared Memory）")])]),_._v(" "),o("li",[o("code",[_._v("套接字（Socket）")]),_._v("。")])]),_._v(" "),o("h2",{attrs:{id:"线程"}},[_._v("线程")]),_._v(" "),o("blockquote",[o("p",[_._v("线程从属于进程，共享进程的内存地址空间，有时被称为轻量级进程(Lightweight Process，LWP），是操作系统调度（CPU调度）执行的最小单位")])]),_._v(" "),o("p",[o("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200616204452301.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hqbDI3MTMxNA==,size_16,color_FFFFFF,t_70",alt:"线程"}})]),_._v(" "),o("h2",{attrs:{id:"进程和线程的区别与联系"}},[_._v("进程和线程的区别与联系")]),_._v(" "),o("h3",{attrs:{id:"区别"}},[_._v("区别")]),_._v(" "),o("ol",[o("li",[o("p",[_._v("进程是系统分配资源的最小单位, 线程是CPU调度的最小单位。")])]),_._v(" "),o("li",[o("p",[_._v("不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("进程")]),_._v("是拥有资源的一个"),o("code",[_._v("独立单位")]),_._v("，"),o("code",[_._v("线程")]),_._v("不拥有系统资源，但可以访问隶属于进程的资源。"),o("code",[_._v("进程")]),_._v("所维护的是程序所包含的资源（静态资源）， 如："),o("code",[_._v("地址空间")]),_._v("，"),o("code",[_._v("打开的文件句柄集")]),_._v("，"),o("code",[_._v("文件系统状态")]),_._v("，"),o("code",[_._v("信号处理handler等")]),_._v("；"),o("code",[_._v("线程")]),_._v("所维护的运行相关的资源（动态资源），如："),o("code",[_._v("运行栈")]),_._v("，"),o("code",[_._v("调度相关的控制信息")]),_._v("，"),o("code",[_._v("待处理的信号集等")]),_._v("；")])]),_._v(" "),o("li",[o("p",[_._v("在创建或撤消"),o("code",[_._v("进程")]),_._v("时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消"),o("code",[_._v("线程")]),_._v("时的开销。但是"),o("code",[_._v("进程")]),_._v("有独立的地址空间，一个"),o("code",[_._v("进程")]),_._v("崩溃后，在"),o("code",[_._v("保护模式")]),_._v("下不会对其它"),o("code",[_._v("进程")]),_._v("产生影响，而"),o("code",[_._v("线程")]),_._v("只是一个"),o("code",[_._v("进程")]),_._v("中的不同执行路径。"),o("code",[_._v("线程")]),_._v("有自己的"),o("code",[_._v("堆栈")]),_._v("和"),o("code",[_._v("局部变量")]),_._v("，但"),o("code",[_._v("线程")]),_._v("之间没有单独的地址空间，一个"),o("code",[_._v("进程")]),_._v("死掉就等于所有的"),o("code",[_._v("线程")]),_._v("死掉，所以"),o("code",[_._v("多进程")]),_._v("的程序要比"),o("code",[_._v("多线程")]),_._v("的程序健壮，但在"),o("code",[_._v("进程")]),_._v("切换时，耗费资源较大，效率要差一些。")])])]),_._v(" "),o("h3",{attrs:{id:"联系"}},[_._v("联系")]),_._v(" "),o("ol",[o("li",[o("p",[_._v("线程是进程内部的资源,共享进程的内存地址空间,一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。")])]),_._v(" "),o("li",[o("p",[_._v("由于默认进程内只有一个线程，所以多核CPU处理多进程就行是一个进程一个核心。")])]),_._v(" "),o("li",[o("p",[_._v("线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。")])])]),_._v(" "),o("h2",{attrs:{id:"协程"}},[_._v("协程")]),_._v(" "),o("blockquote",[o("p",[_._v("协程是属于线程的。协程的程序是在线程里面跑的。因此协程又称作微线程和纤程等。")])]),_._v(" "),o("p",[_._v("协程没有线程的上下文切换消耗。协程的调度是用户手动切换的，因此更加灵活，不会出现执行一半的代码被强制中断，无需原子操作锁。")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200616205637977.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hqbDI3MTMxNA==,size_16,color_FFFFFF,t_70",alt:"协程"}})]),_._v(" "),o("p",[_._v("协程的特点在于是一个"),o("code",[_._v("线程")]),_._v("执行，那和多线程比，协程有何优势？")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("极高的执行效率：因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显；")])]),_._v(" "),o("li",[o("p",[_._v("不需要多线程的锁机制：因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。")])])])])}),[],!1,null,null,null);v.default=c.exports}}]);